// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    apiQuota      ApiQuota?
    videoFiles    VideoFile[]
    
    // Stripe-related fields
    stripeCustomerId String?  @unique
    isActive         Boolean  @default(false)
    subscriptionId   String?
    priceId          String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ApiQuota {
  id           String   @id @default(cuid())
  userId       String   @unique
  requestsUsed Int      @default(0)  // Changed from 'used'
  maxRequests  Int      @default(10) // Changed from 'quota'
  resetDate    DateTime @default(now()) // Added missing field
  secretKey    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_quotas")
}


model VideoFile {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    key       String   @unique
    analyzed  Boolean  @default(false)
    createdAt DateTime @default(now())
}

// New model for tracking purchases
model Purchase {
    id               String   @id @default(cuid())
    userId           String
    stripeSessionId  String   @unique
    amount           Int      // Amount in cents
    currency         String   @default("usd")
    status           String   @default("pending") // pending, completed, failed
    planType         String   // basic, pro, premium
    requestsGranted  Int
    
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
